C51 COMPILER V8.05a   TWO_BALANCE_CAR                                                      12/01/2012 21:20:41 PAGE 1   


C51 COMPILER V8.05a, COMPILATION OF MODULE TWO_BALANCE_CAR
OBJECT MODULE PLACED IN two_balance_car.OBJ
COMPILER INVOKED BY: d:\Program Files\Keil\C51\BIN\C51.EXE two_balance_car.c BROWSE DEBUG OBJECTEXTEND

line level    source

   1                                                                            
   2          /***********************************************************************
   3          // 两轮自平衡车最终版控制程序（6轴MPU6050+互补滤波+PWM电机） 
   4          // 单片机STC12C5A60S2 
   5          // 晶振：20M
   6          // 日期：2012.11.26 - ？
   7          ***********************************************************************/
   8          
   9          #include <REG52.H>      
  10          #include <math.h>     
  11          #include <stdio.h>   
  12          #include <INTRINS.H>
  13          
  14          typedef unsigned char  uchar;
  15          typedef unsigned short ushort;
  16          typedef unsigned int   uint;
  17          
  18          //******功能模块头文件*******
  19          
  20          #include "DELAY.H"                  //延时头文件
  21          #include "STC_ISP.H"        //程序烧录头文件
  22          #include "SET_SERIAL.H"         //串口头文件
  23          #include "SET_PWM.H"            //PWM头文件
  24          #include "MOTOR.H"                      //电机控制头文件
  25          #include "MPU6050.H"            //MPU6050头文件
  26          
  27          
  28          
  29          //******角度参数************
  30          
  31          float Gyro_y;        //Y轴陀螺仪数据暂存
  32          float Angle_gy;      //由角速度计算的倾斜角度
  33          float Accel_x;       //X轴加速度值暂存
  34          float Angle_ax;      //由加速度计算的倾斜角度
  35          float Angle;         //小车最终倾斜角度
  36          uchar value;             //角度正负极性标记     
  37          
  38          //******PWM参数*************
  39          
  40          int   speed_mr;          //右电机转速
  41          int   speed_ml;          //左电机转速
  42          int   PWM_R;         //右轮PWM值计算
  43          int   PWM_L;         //左轮PWM值计算
  44          float PWM;           //综合PWM计算
  45          float PWMI;                      //PWM积分值
  46          
  47          //******电机参数*************
  48          
  49          float speed_r_l;        //电机转速
  50          float speed;        //电机转速滤波
  51          float position;     //位移
  52          
  53          //******蓝牙遥控参数*************
  54          uchar remote_char;
  55          char  turn_need;
C51 COMPILER V8.05a   TWO_BALANCE_CAR                                                      12/01/2012 21:20:41 PAGE 2   

  56          char  speed_need;
  57          
  58          //*********************************************************
  59          //定时器100Hz数据更新中断
  60          //*********************************************************
  61          
  62          void Init_Timer1(void)  //10毫秒@20MHz,100Hz刷新频率
  63          {
  64   1              AUXR &= 0xBF;           //定时器时钟12T模式
  65   1              TMOD &= 0x0F;           //设置定时器模式
  66   1              TMOD |= 0x10;           //设置定时器模式
  67   1              TL1 = 0xE5;                 //设置定时初值
  68   1              TH1 = 0xBE;                 //设置定时初值
  69   1              TF1 = 0;                    //清除TF1标志
  70   1              TR1 = 1;                    //定时器1开始计时
  71   1      }
  72          
  73          
  74          
  75          //*********************************************************
  76          //中断控制初始化
  77          //*********************************************************
  78          
  79          void Init_Interr(void)   
  80          {
  81   1              EA = 1;     //开总中断
  82   1          EX0 = 1;    //开外部中断INT0
  83   1          EX1 = 1;    //开外部中断INT1
  84   1          IT0 = 1;    //下降沿触发
  85   1          IT1 = 1;    //下降沿触发
  86   1              ET1 = 1;    //开定时器1中断
  87   1      }
  88          
  89          
  90          
  91          //******卡尔曼参数************
  92                          
  93          float code Q_angle=0.001;  
  94          float code Q_gyro=0.003;
  95          float code R_angle=0.5;
  96          float code dt=0.01;                       //dt为kalman滤波器采样时间;
  97          char  code C_0 = 1;
  98          float xdata Q_bias, Angle_err;
  99          float xdata PCt_0, PCt_1, E;
 100          float xdata K_0, K_1, t_0, t_1;
 101          float xdata Pdot[4] ={0,0,0,0};
 102          float xdata PP[2][2] = { { 1, 0 },{ 0, 1 } };
 103          
 104          //*********************************************************
 105          // 卡尔曼滤波
 106          //*********************************************************
 107          
 108          //Kalman滤波，20MHz的处理时间约0.77ms；
 109          
 110          void Kalman_Filter(float Accel,float Gyro)              
 111          {
 112   1              Angle+=(Gyro - Q_bias) * dt; //先验估计
 113   1      
 114   1              
 115   1              Pdot[0]=Q_angle - PP[0][1] - PP[1][0]; // Pk-先验估计误差协方差的微分
 116   1      
 117   1              Pdot[1]=- PP[1][1];
C51 COMPILER V8.05a   TWO_BALANCE_CAR                                                      12/01/2012 21:20:41 PAGE 3   

 118   1              Pdot[2]=- PP[1][1];
 119   1              Pdot[3]=Q_gyro;
 120   1              
 121   1              PP[0][0] += Pdot[0] * dt;   // Pk-先验估计误差协方差微分的积分
 122   1              PP[0][1] += Pdot[1] * dt;   // =先验估计误差协方差
 123   1              PP[1][0] += Pdot[2] * dt;
 124   1              PP[1][1] += Pdot[3] * dt;
 125   1                      
 126   1              Angle_err = Accel - Angle;      //zk-先验估计
 127   1              
 128   1              PCt_0 = C_0 * PP[0][0];
 129   1              PCt_1 = C_0 * PP[1][0];
 130   1              
 131   1              E = R_angle + C_0 * PCt_0;
 132   1              
 133   1              K_0 = PCt_0 / E;
 134   1              K_1 = PCt_1 / E;
 135   1              
 136   1              t_0 = PCt_0;
 137   1              t_1 = C_0 * PP[0][1];
 138   1      
 139   1              PP[0][0] -= K_0 * t_0;           //后验估计误差协方差
 140   1              PP[0][1] -= K_0 * t_1;
 141   1              PP[1][0] -= K_1 * t_0;
 142   1              PP[1][1] -= K_1 * t_1;
 143   1                      
 144   1              Angle   += K_0 * Angle_err;      //后验估计
 145   1              Q_bias  += K_1 * Angle_err;      //后验估计
 146   1              Gyro_y   = Gyro - Q_bias;        //输出值(后验估计)的微分=角速度
 147   1      
 148   1      }
 149          
 150          
 151          
 152          //*********************************************************
 153          // 倾角计算（卡尔曼融合）
 154          //*********************************************************
 155          
 156          void Angle_Calcu(void)   
 157          {
 158   1              //------加速度--------------------------
 159   1      
 160   1              //范围为2g时，换算关系：16384 LSB/g
 161   1              //角度较小时，x=sinx得到角度（弧度）, deg = rad*180/3.14
 162   1              //因为x>=sinx,故乘以1.3适当放大
 163   1      
 164   1              Accel_x  = GetData(ACCEL_XOUT_H);         //读取X轴加速度
 165   1              Angle_ax = (Accel_x - 1100) /16384;   //去除零点偏移,计算得到角度（弧度）
 166   1              Angle_ax = Angle_ax*1.2*180/3.14;     //弧度转换为度,
 167   1      
 168   1      
 169   1          //-------角速度-------------------------
 170   1      
 171   1              //范围为2000deg/s时，换算关系：16.4 LSB/(deg/s)
 172   1      
 173   1              Gyro_y = GetData(GYRO_YOUT_H);        //静止时角速度Y轴输出为-30左右
 174   1              Gyro_y = -(Gyro_y + 30)/16.4;         //去除零点偏移，计算角速度值,负号为方向处理 
 175   1              //Angle_gy = Angle_gy + Gyro_y*0.01;  //角速度积分得到倾斜角度. 
 176   1      
 177   1              
 178   1              //-------卡尔曼滤波融合-----------------------
 179   1      
C51 COMPILER V8.05a   TWO_BALANCE_CAR                                                      12/01/2012 21:20:41 PAGE 4   

 180   1              Kalman_Filter(Angle_ax,Gyro_y);       //卡尔曼滤波计算倾角
 181   1      
 182   1      
 183   1              /*//-------互补滤波-----------------------
 184   1      
 185   1              //补偿原理是取当前倾角和加速度获得倾角差值进行放大，然后与
 186   1          //陀螺仪角速度叠加后再积分，从而使倾角最跟踪为加速度获得的角度
 187   1              //0.5为放大倍数，可调节补偿度；0.01为系统周期10ms       
 188   1                      
 189   1              Angle = Angle + (((Angle_ax-Angle)*0.5 + Gyro_y)*0.01);*/
 190   1                                                                                                                                
 191   1      }  
 192          
 193          
 194          
 195          //*********************************************************
 196          //电机转速和位移值计算
 197          //*********************************************************
 198          
 199          void Psn_Calcu(void)     
 200          {
 201   1              
 202   1              speed_r_l =(speed_mr + speed_ml)*0.5;
 203   1              speed *= 0.7;                             //车轮速度滤波
 204   1              speed += speed_r_l*0.3; 
 205   1              position += speed;                        //积分得到位移
 206   1              position += speed_need;
 207   1              if(position<-6000) position = -6000;
 208   1              if(position> 6000) position =  6000;
 209   1      
 210   1               
 211   1      }
 212          
 213          
 214          static float code Kp  = 9.0;       //PID参数
 215          static float code Kd  = 2.6;        //PID参数
 216          static float code Kpn = 0.01;      //PID参数
 217          static float code Ksp = 2.0;        //PID参数
 218          
 219          //*********************************************************
 220          //电机PWM值计算
 221          //*********************************************************
 222          
 223          void PWM_Calcu(void)     
 224          {
 225   1          
 226   1              if(Angle<-40||Angle>40)               //角度过大，关闭电机 
 227   1              {  
 228   2                CCAP0H = 0;
 229   2            CCAP1H = 0;
 230   2                return;
 231   2              }
 232   1              PWM  = Kp*Angle + Kd*Gyro_y;          //PID：角速度和角度
 233   1              PWM += Kpn*position + Ksp*speed;      //PID：速度和位置
 234   1              PWM_R = PWM + turn_need;
 235   1              PWM_L = PWM - turn_need;
 236   1              PWM_Motor(PWM_L,PWM_R); 
 237   1               
 238   1      }
 239          
 240          
 241          
C51 COMPILER V8.05a   TWO_BALANCE_CAR                                                      12/01/2012 21:20:41 PAGE 5   

 242          
 243          //*********************************************************
 244          //手机蓝牙遥控
 245          //*********************************************************
 246          
 247          void Bluetooth_Remote(void)      
 248          {
 249   1      
 250   1              remote_char = receive_char();                              //接收蓝牙串口数据
 251   1      
 252   1              if(remote_char ==0x02) speed_need = -80;           //前进
 253   1              else if(remote_char ==0x01) speed_need = 80;   //后退
 254   1                   else speed_need = 0;                                          //不动
 255   1      
 256   1          if(remote_char ==0x03) turn_need = 15;                 //左转
 257   1              else if(remote_char ==0x04) turn_need = -15;   //右转
 258   1                   else turn_need = 0;                                           //不转
 259   1               
 260   1      }
 261          
 262          
 263          /*=================================================================================*/
 264          
 265          //*********************************************************
 266          //main
 267          //*********************************************************
 268          void main()
 269          { 
 270   1      
 271   1              delaynms(500);     //上电延时
 272   1              Init_PWM();            //PWM初始化
 273   1          Init_Timer0();     //初始化定时器0，作为PWM时钟源
 274   1              Init_Timer1();     //初始化定时器1
 275   1              Init_Interr();     //中断初始化
 276   1              Init_Motor();      //电机控制初始化
 277   1              Init_BRT();                //串口初始化（独立波特率）
 278   1              InitMPU6050();     //初始化MPU6050
 279   1              delaynms(500);     
 280   1      
 281   1              while(1)
 282   1              {
 283   2                 
 284   2               Bluetooth_Remote();
 285   2      
 286   2              }
 287   1      }
 288          
 289          
 290          /*=================================================================================*/
 291          
 292          //********timer1中断***********************
 293          
 294          void Timer1_Update(void) interrupt 3
 295          {
 296   1        
 297   1         TL1 = 0xE5;              //设置定时初值10MS
 298   1         TH1 = 0xBE;
 299   1         
 300   1         //STC_ISP();                    //程序下载
 301   1         Angle_Calcu();                  //倾角计算
 302   1         Psn_Calcu();                    //电机位移计算
 303   1         PWM_Calcu();                    //计算PWM值
C51 COMPILER V8.05a   TWO_BALANCE_CAR                                                      12/01/2012 21:20:41 PAGE 6   

 304   1         
 305   1         speed_mr = speed_ml = 0;      
 306   1       
 307   1      } 
 308          
 309          
 310          //********右电机中断***********************
 311          
 312          void INT_L(void) interrupt 0
 313          {
 314   1      
 315   1         if(SPDL == 1)  { speed_ml++; }                //左电机前进
 316   1         else               { speed_ml--; }            //左电机后退
 317   1         LED = ~LED;
 318   1      
 319   1       } 
 320          
 321          
 322          //********左电机中断***********************
 323          
 324          void INT_R(void) interrupt 2
 325          {
 326   1      
 327   1         if(SPDR == 1)  { speed_mr++; }                //右电机前进
 328   1         else               { speed_mr--; }            //右电机后退
 329   1         LED = ~LED;
 330   1      
 331   1       } 


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   2599    ----
   CONSTANT SIZE    =     33    ----
   XDATA SIZE       =     68    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     52       8
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1       1
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
