
/****************************************

 平衡车两路直流减速电机PWM控制 

****************************************/


#ifndef	__MOTOR_H__
#define __MOTOR_H__

#include <REG52.H>	
#include "SET_PWM.H"		//PWM头文件


//电机PWM控制端口定义
sbit LED = P0^0;	  //LED
sbit EN12 = P1^3;     //L298电机（左）驱动使能
sbit EN34 = P1^4;     //L298电机（右）驱动使能
sbit M1	= P1^1;		  //电机驱动(M1=1，M2=0，右电机后退)
sbit M2	= P1^2;		  //电机驱动(M1=0，M2=1，右电机前进)
sbit M3	= P1^5;		  //电机驱动(M3=1，M4=0，左电机前进)
sbit M4	= P1^0;		  //电机驱动(M3=0，M4=1，左电机后退)

sbit SPDR = P3^4;	 //右电机B相测速，用来判断电机转向
sbit SPDL = P3^5;	 //左电机B相测速，用来判断电机转向

//变量定义
bit flg_direc;		  //电机运动方向标志



/*********函数区************************/

//**************************************
//电机初始化
//**************************************
void Init_Motor()
{
   CCAP0H = 255;      //关闭PWM0输出
   CCAP1H = 255;      //关闭PWM1输出
   EN12 = 0;		  //关闭左电机
   EN34 = 0;		  //关闭右电机
}



//**************************************
//电机控制
//**************************************
void PWM_Motor(int pwm_l,int pwm_r)
{

   if(pwm_l<0)
   {	
     M1 = 1;				      //右电机后退
     M2 = 0;
	 pwm_l = -pwm_l;
	}
   else
   {	
     M1 = 0;				      //右电机前进
     M2 = 1; 
	}

	if(pwm_r<0)
   {	
     M3 = 0;				      //左电机后退
     M4 = 1;
	 pwm_r = -pwm_r;
	}
   else
   {	
     M3 = 1;				      //左电机前进
     M4 = 0;
	 
	}

   if(pwm_l>255)  pwm_l = 255 ;    //防止PWM值超过255
   if(pwm_r>255)  pwm_r = 255 ;    //防止PWM值超过255
   
   CCAP0H = 0 + pwm_l;     //设定PWM0占空比(CCAP0H=255，速度最大)
   CCAP1H = 0 + pwm_r;     //设定PWM1占空比(CCAP0H=255，速度最大)

   //这里50可调，作用是跳过电机PWM死区，在PWM值为0-40时，电机不转动，即死区（**错误的注释，解释在下句*）
   //*此处曾经完全被误导，曾经在0的地方加的是50，目的是为了消除电机PWM死区，但是导致小车严重震荡，现在该为零才对
}

#endif