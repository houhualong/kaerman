/** ###################################################################
**     THIS BEAN MODULE IS GENERATED BY THE TOOL. DO NOT MODIFY IT.
**     Filename  : ADCon.H
**     Project   : CF2_0
**     Processor : MCF52255CAF80
**     Beantype  : ADC
**     Version   : Bean 01.557, Driver 01.03, CPU db: 3.00.000
**     Compiler  : CodeWarrior MCF C Compiler
**     Date/Time : 2012-3-23, 16:50
**     Abstract  :
**         This device "ADC" implements an A/D converter,
**         its control methods and interrupt/event handling procedure.
**     Settings  :
**         AD control register         : CTRL1       [0x00190000]
**         AD control register         : CTRL2       [0x00190002]
**         AD control register         : ADZCC       [0x00190004]
**         AD control register         : ADLST1      [0x00190006]
**         AD control register         : ADLST2      [0x00190008]
**         AD control register         : ADSDIS      [0x0019000A]
**         AD control register         : ADSTAT      [0x0019000C]
**         AD control register         : ADLSTAT     [0x0019000E]
**         AD control register         : ADZCSTAT    [0x00190010]
**         AD control register         : ADLLMT0     [0x00190022]
**         AD control register         : ADLLMT1     [0x00190024]
**         AD control register         : ADLLMT2     [0x00190026]
**         AD control register         : ADLLMT3     [0x00190028]
**         AD control register         : ADLLMT4     [0x0019002A]
**         AD control register         : ADLLMT5     [0x0019002C]
**         AD control register         : ADLLMT6     [0x0019002E]
**         AD control register         : ADLLMT7     [0x00190030]
**         AD control register         : ADHLMT0     [0x00190032]
**         AD control register         : ADHLMT1     [0x00190034]
**         AD control register         : ADHLMT2     [0x00190036]
**         AD control register         : ADHLMT3     [0x00190038]
**         AD control register         : ADHLMT4     [0x0019003A]
**         AD control register         : ADHLMT5     [0x0019003C]
**         AD control register         : ADHLMT6     [0x0019003E]
**         AD control register         : ADHLMT7     [0x00190040]
**         AD control register         : ADOFS0      [0x00190042]
**         AD control register         : ADOFS1      [0x00190044]
**         AD control register         : ADOFS2      [0x00190046]
**         AD control register         : ADOFS3      [0x00190048]
**         AD control register         : ADOFS4      [0x0019004A]
**         AD control register         : ADOFS5      [0x0019004C]
**         AD control register         : ADOFS6      [0x0019004E]
**         AD control register         : ADOFS7      [0x00190050]
**         AD control register         : POWER       [0x00190052]
**         AD control register         : CAL         [0x00190054]
**         Interrupt name              : INT_ADC_ADCA
**         Priority                    : 430
**         User handling procedure     : not specified
**         Number of conversions       : 8
**         AD resolution               : 12-bit
**
**         Input pins
**
**              Port name              : PORTAN
**              Bit number (in port)   : 0
**              Bit mask of the port   : 0x0001
**              Port data register     : PORTAN      [0x0010000A]
**              Port control register  : DDRAN       [0x00100022]
**              Port function register : PANPAR      [0x0010006A]
**
**              Port name              : PORTAN
**              Bit number (in port)   : 1
**              Bit mask of the port   : 0x0002
**              Port data register     : PORTAN      [0x0010000A]
**              Port control register  : DDRAN       [0x00100022]
**              Port function register : PANPAR      [0x0010006A]
**
**              Port name              : PORTAN
**              Bit number (in port)   : 2
**              Bit mask of the port   : 0x0004
**              Port data register     : PORTAN      [0x0010000A]
**              Port control register  : DDRAN       [0x00100022]
**              Port function register : PANPAR      [0x0010006A]
**
**              Port name              : PORTAN
**              Bit number (in port)   : 3
**              Bit mask of the port   : 0x0008
**              Port data register     : PORTAN      [0x0010000A]
**              Port control register  : DDRAN       [0x00100022]
**              Port function register : PANPAR      [0x0010006A]
**
**              Port name              : PORTAN
**              Bit number (in port)   : 4
**              Bit mask of the port   : 0x0010
**              Port data register     : PORTAN      [0x0010000A]
**              Port control register  : DDRAN       [0x00100022]
**              Port function register : PANPAR      [0x0010006A]
**
**              Port name              : PORTAN
**              Bit number (in port)   : 5
**              Bit mask of the port   : 0x0020
**              Port data register     : PORTAN      [0x0010000A]
**              Port control register  : DDRAN       [0x00100022]
**              Port function register : PANPAR      [0x0010006A]
**
**              Port name              : PORTAN
**              Bit number (in port)   : 6
**              Bit mask of the port   : 0x0040
**              Port data register     : PORTAN      [0x0010000A]
**              Port control register  : DDRAN       [0x00100022]
**              Port function register : PANPAR      [0x0010006A]
**
**         Initialization:
**              Conversion             : Enabled
**              Event                  : Enabled
**         High speed mode
**             Prescaler               : divide-by-16
**     Contents  :
**         Measure        - byte ADCon_Measure(bool WaitForResult);
**         MeasureChan    - byte ADCon_MeasureChan(bool WaitForResult, byte Channel);
**         GetValue16     - byte ADCon_GetValue16(word *Values);
**         GetChanValue16 - byte ADCon_GetChanValue16(byte Channel, word *Value);
**
**     Copyright : 1997 - 2009 Freescale Semiconductor, Inc. All Rights Reserved.
**     
**     http      : www.freescale.com
**     mail      : support@freescale.com
** ###################################################################*/

/* MODULE ADCon. */

#ifndef __ADCon
#define __ADCon

/*Include shared modules, which are used for whole project*/
#include "PE_Types.h"
#include "PE_Error.h"
#include "PE_Const.h"
#include "IO_Map.h"

/* MODULE ADCon. */



void ADCon_InterruptCC(void);
/*
** ===================================================================
**     Method      :  ADCon_InterruptCC (bean ADC)
**
**     Description :
**         The method services the conversion complete interrupt of the 
**         selected peripheral(s) and eventually invokes the beans 
**         event(s).
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

byte ADCon_Measure(bool WaitForResult);
/*
** ===================================================================
**     Method      :  ADCon_Measure (bean ADC)
**
**     Description :
**         This method performs one measurement on all channels that
**         are set in the bean inspector. (Note: If the <number of
**         conversions> is more than one the conversion of A/D channels
**         is performed specified number of times.)
**     Parameters  :
**         NAME            - DESCRIPTION
**         WaitForResult   - Wait for a result of a
**                           conversion. If <interrupt service> is
**                           disabled, A/D peripheral doesn't support
**                           measuring all channels at once or Autoscan
**                           mode property isn't enabled and at the same
**                           time the <number of channel> is greater
**                           than 1, then the WaitForResult parameter is
**                           ignored and the method waits for each
**                           result every time. If the <interrupt
**                           service> is disabled and a <number of
**                           conversions> is greater than 1, the
**                           parameter is ignored and the method also
**                           waits for each result every time.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_DISABLED - Device is disabled
**                           ERR_BUSY - A conversion is already running
** ===================================================================
*/

byte ADCon_MeasureChan(bool WaitForResult,byte Channel);
/*
** ===================================================================
**     Method      :  ADCon_MeasureChan (bean ADC)
**
**     Description :
**         This method performs measurement on one channel. (Note: If
**         the <number of conversions> is more than one the conversion
**         of the A/D channel is performed specified number of times.)
**     Parameters  :
**         NAME            - DESCRIPTION
**         WaitForResult   - Wait for a result of
**                           conversion. If the <interrupt service> is
**                           disabled and at the same time a <number of
**                           conversions> is greater than 1, the
**                           WaitForResult parameter is ignored and the
**                           method waits for each result every time.
**         Channel         - Channel number. If only one
**                           channel in the bean is set this parameter
**                           is ignored, because the parameter is set
**                           inside this method.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_DISABLED - Device is disabled
**                           ERR_BUSY - A conversion is already running
**                           ERR_RANGE - Parameter "Channel" out of range
** ===================================================================
*/

byte ADCon_GetValue16(word *Values);
/*
** ===================================================================
**     Method      :  ADCon_GetValue16 (bean ADC)
**
**     Description :
**         This method returns the last measured values of all channels
**         justified to the left. Compared with <GetValue> method this
**         method returns more accurate result if the <number of
**         conversions> is greater than 1 and <AD resolution> is less
**         than 16 bits. In addition, the user code dependency on <AD
**         resolution> is eliminated.
**     Parameters  :
**         NAME            - DESCRIPTION
**       * Values          - Pointer to the array that contains
**                           the measured data.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_NOTAVAIL - Requested value not
**                           available
**                           ERR_OVERRUN - External trigger overrun flag
**                           was detected after the last value(s) was
**                           obtained (for example by GetValue). This
**                           error may not be supported on some CPUs
**                           (see generated code).
** ===================================================================
*/

byte ADCon_GetChanValue16(byte Channel,word *Value);
/*
** ===================================================================
**     Method      :  ADCon_GetChanValue16 (bean ADC)
**
**     Description :
**         This method returns the last measured value of the required
**         channel justified to the left. Compared with <GetChanValue>
**         method this method returns more accurate result if the
**         <number of conversions> is greater than 1 and <AD resolution>
**         is less than 16 bits. In addition, the user code dependency
**         on <AD resolution> is eliminated.
**     Parameters  :
**         NAME            - DESCRIPTION
**         Channel         - Channel number. If only one
**                           channel in the bean is set then this
**                           parameter is ignored.
**       * Value           - Pointer to the measured value.
**     Returns     :
**         ---             - Error code, possible codes:
**                           ERR_OK - OK
**                           ERR_SPEED - This device does not work in
**                           the active speed mode
**                           ERR_NOTAVAIL - Requested value not
**                           available
**                           ERR_RANGE - Parameter "Channel" out of
**                           range
**                           ERR_OVERRUN - External trigger overrun flag
**                           was detected after the last value(s) was
**                           obtained (for example by GetValue). This
**                           error may not be supported on some CPUs
**                           (see generated code).
** ===================================================================
*/

void ADCon_Init(void);
/*
** ===================================================================
**     Method      :  ADCon_Init (bean ADC)
**
**     Description :
**         Initializes the associated peripheral(s) and the beans 
**         internal variables. The method is called automatically as a 
**         part of the application initialization code.
**         This method is internal. It is used by Processor Expert only.
** ===================================================================
*/

/* END ADCon. */

#endif /* ifndef __ADCon */
/*
** ###################################################################
**
**     This file was created by Processor Expert 1.05 [04.27]
**     for the Freescale MCF series of microcontrollers.
**
** ###################################################################
*/
